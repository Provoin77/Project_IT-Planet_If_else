# telegram_bot.py

import os
import time
from itsdangerous import URLSafeTimedSerializer
from telegram import Bot, Update
from telegram.ext import Updater, CommandHandler, CallbackContext
from sqlalchemy.exc import OperationalError
from sqlalchemy import text

# ‚îÄ‚îÄ –ò–º–ø–æ—Ä—Ç –≤–∞—à–µ–≥–æ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –ë–î ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from app.app import app, db
from app.models import User, OrganizerSubscription

# ‚îÄ‚îÄ –ñ–¥—ë–º, –ø–æ–∫–∞ Postgres –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
for _ in range(30):
    try:
        with app.app_context():
            db.session.execute(text("SELECT 1"))
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –ë–î")
        break
    except OperationalError:
        print("‚è≥ –ñ–¥—ë–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö‚Ä¶")
        time.sleep(1)
else:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î, –≤—ã—Ö–æ–∂—É")
    exit(1)

# ‚îÄ‚îÄ –î–æ–º–µ–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
_raw = os.getenv('APP_DOMAIN', '').strip()
if not _raw:
    _raw = '127.0.0.1:80'
if _raw.startswith(('http://','https://')):
    DOMAIN = _raw.rstrip('/')
else:
    DOMAIN = f'http://{_raw}'

# ‚îÄ‚îÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
BOT_TOKEN  = os.getenv('TELEGRAM_BOT_TOKEN')
BOT         = Bot(token=BOT_TOKEN)
serializer  = URLSafeTimedSerializer(app.config['SECRET_KEY'])

def send_message(chat_id: int, text: str):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.
    """
    try:
        BOT.send_message(chat_id=chat_id, text=text)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¢–ì-—Å–æ–æ–±—â–µ–Ω–∏–µ {chat_id}: {e}")

def generate_reset_token(user_id: int) -> str:
    return serializer.dumps(user_id, salt='password-reset-salt')

def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.\n"
        "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/help  ‚Äî –∫–æ–º–∞–Ω–¥—ã\n"
        "/reset ‚Äî —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è\n"
        "/follow <username> ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞\n"
        "/unfollow <username> ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è"
    )

def help_cmd(update: Update, context: CallbackContext):
    update.message.reply_text(
        "/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help  ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞\n"
        "/reset ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è\n"
        "/follow <username> ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞\n"
        "/unfollow <username> ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è"
    )

def reset_cmd(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    with app.app_context():
        user = User.query.filter_by(telegram_id=str(chat_id)).first()
    if not user:
        return update.message.reply_text(
            "‚ùó –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ Telegram –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –Ω–∞ —Å–∞–π—Ç–µ."
        )
    token = generate_reset_token(user.id)
    link  = f"{DOMAIN}/reset-password/{token}"
    update.message.reply_text("üîê –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è: " + link)

def follow(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    if not context.args:
        return update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /follow <username_–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞>")
    username = context.args[0]
    with app.app_context():
        me  = User.query.filter_by(telegram_id=str(chat_id)).first()
        org = User.query.filter_by(username=username, role='organizer').first()

        if not me:
            return update.message.reply_text("‚ùó –ü—Ä–∏–≤—è–∂–∏—Ç–µ Telegram –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–∞ —Å–∞–π—Ç–µ.")
        if not org:
            return update.message.reply_text("‚ùó –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        if org.id == me.id:
            return update.message.reply_text("‚ùó –ù–µ–ª—å–∑—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ–±—è.")

        exists = OrganizerSubscription.query.filter_by(
            user_id=me.id, organizer_id=org.id
        ).first()
        if exists:
            return update.message.reply_text("‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

        sub = OrganizerSubscription(user_id=me.id, organizer_id=org.id)
        db.session.add(sub)
        db.session.commit()
        update.message.reply_text(f"‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ ¬´{org.org_name}¬ª.")

def unfollow(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    if not context.args:
        return update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /unfollow <username_–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞>")
    username = context.args[0]
    with app.app_context():
        me  = User.query.filter_by(telegram_id=str(chat_id)).first()
        org = User.query.filter_by(username=username, role='organizer').first()

        if not me or not org:
            return update.message.reply_text(
                "‚ùó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∏ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π username."
            )
        sub = OrganizerSubscription.query.filter_by(
            user_id=me.id, organizer_id=org.id
        ).first()
        if not sub:
            return update.message.reply_text("‚ÑπÔ∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

        db.session.delete(sub)
        db.session.commit()
        update.message.reply_text(f"‚úÖ –û—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç ¬´{org.org_name}¬ª.")

def main():
    BOT.delete_webhook()

    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start",    start))
    dp.add_handler(CommandHandler("help",     help_cmd))
    dp.add_handler(CommandHandler("reset",    reset_cmd))
    dp.add_handler(CommandHandler("follow",   follow))
    dp.add_handler(CommandHandler("unfollow", unfollow))

    # 2) –°—Ç–∞—Ä—Ç—É–µ–º polling –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ pending updates
    updater.start_polling(drop_pending_updates=True)
    print("üöÄ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    updater.idle()

if __name__ == '__main__':
    main()
