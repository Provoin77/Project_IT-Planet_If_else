document.addEventListener('DOMContentLoaded', () => {
    const toggle = document.getElementById('notifications-toggle');
    const panel  = document.getElementById('notifications-panel');
    const close  = document.getElementById('notifications-close');
    const count  = document.getElementById('notifications-count');
    const list   = document.getElementById('notifications-list');
    const clearAll = document.getElementById('notifications-clear-all');
    const favToggle     = document.getElementById('favorites-toggle');
    const friendsToggle = document.getElementById('friends-toggle');
    

    console.log('DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–∞–≤–µ—à–∏–≤–∞–µ–º handlers –Ω–∞ –∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫ –∏ –∫—Ä–µ—Å—Ç–∏–∫');
  
     // –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫—É
    toggle.addEventListener('click', () => {
        const isOpening = !panel.classList.contains('open');
        panel.classList.toggle('open');
        if (isOpening) {
        // —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–∫—Ä—ã–ª–∏ ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –∏–∫–æ–Ω–∫–∏
        if (favToggle)     favToggle.style.display = 'none';
        if (friendsToggle) friendsToggle.style.display = 'none';
        } else {
        // –∑–∞–∫—Ä—ã–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∫–ª–∏–∫–æ–º ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
        if (favToggle)     favToggle.style.display = '';
        if (friendsToggle) friendsToggle.style.display = '';
        }
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ –ø–æ –∫—Ä–µ—Å—Ç–∏–∫—É
    close.addEventListener('click', () => {
        panel.classList.remove('open');
        if (favToggle)     favToggle.style.display = '';
        if (friendsToggle) friendsToggle.style.display = '';
    });
        
  
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞
    async function fetchNotes() {
      try {
        const res = await fetch('/notifications');
        const notes = await res.json();
        renderNotes(notes);
      } catch (e) {
        console.error(e);
      }
    }
  
    // –†–µ–Ω–¥–µ—Ä–∏–º –∏–∫–æ–Ω–∫—É –∫–æ–ª-–≤–æ –∏ —Å–ø–∏—Å–æ–∫
    function renderNotes(notes) {
        // badge
        if (notes.length > 0) {
          count.textContent = notes.length;
          count.style.display = 'inline-block';
        } else {
          count.style.display = 'none';
        }
      
        // —Å–ø–∏—Å–æ–∫
        list.innerHTML = '';
        notes.forEach(n => {
          // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º URL –¥–ª—è ¬´–ü–µ—Ä–µ–π—Ç–∏¬ª
          let url = n.url; // —Ç–µ–ø–µ—Ä—å –±–µ—Ä—ë–º –ø—Ä—è–º–æ –∏–∑ –æ—Ç–≤–µ—Ç–∞
          if (n.message.includes('–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞')) {
            url = '/organizers';              // —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤
          } else if (n.message.includes('–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')) {
            url = '/moderator/events';        // —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
          }
      
          const li = document.createElement('li');
          li.innerHTML = `
            <span>${n.message}</span>
            <div class="note-actions">
              ${n.url ? `<a href="${n.url}" class="go-to">–ü–µ—Ä–µ–π—Ç–∏</a>` : ''}
              <button class="delete-note" data-id="${n.id}">üóëÔ∏è</button>
            </div>
          `;
          list.appendChild(li);
        });
      }
  
    // –£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ
    list.addEventListener('click', e => {
      if (!e.target.classList.contains('delete-note')) return;
      const id = e.target.dataset.id;
      fetch('/notifications/' + id, { method: 'DELETE' })
        .then(() => fetchNotes());
    });
  
    // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë
    clearAll.addEventListener('click', () =>
      fetch('/notifications/clear_all', { method: 'DELETE' })
        .then(() => fetchNotes())
    );
  
    // –æ–ø—Ä–æ—Å –∫–∞–∂–¥—ã–µ 2—Å–µ–∫
    setInterval(fetchNotes, 2000);
    // —Å—Ä–∞–∑—É –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–∑
    fetchNotes();
  });
  