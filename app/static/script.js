var map;
var allPlacemarks = [];


function initFavoritesPanel() {
    const toggle   = document.getElementById('favorites-toggle');
    const panel    = document.getElementById('favorites-panel');
    const closeBtn = document.getElementById('favorites-close');
    if (!toggle || !panel || !closeBtn) return;

    toggle.addEventListener('click', () => {
        panel.classList.toggle('open');
        // —Å–∫—Ä—ã–≤–∞–µ–º —Å–∞–º –∑–Ω–∞—á–æ–∫
        toggle.style.display = 'none';
    });
    closeBtn.addEventListener('click', () => {
        panel.classList.remove('open');
        // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–æ–∫
        toggle.style.display = '';
    });

  }

// === –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ –≤ –ø–∞–Ω–µ–ª–∏ ===
function renderSingle(type, value) {
    let ul;
    if (type === 'event')        ul = document.getElementById('fav-events-list');
    else if (type === 'sphere')   ul = document.getElementById('fav-spheres-list');
    else if (type === 'type')     ul = document.getElementById('fav-types-list');
    else if (type === 'organizer')ul = document.getElementById('fav-organizers-list');
    if (!ul || !value) return;

    let text = value;
    if (type === 'event') {
      const ev = eventsData.find(e => e.id.toString() === value.toString());
      text = ev ? ev.title : text;
    }
    if (ul.querySelector(`li[data-fav-value="${value}"]`)) return;

    const li = document.createElement('li');
    li.dataset.favValue = value;
    li.innerHTML = `
      <span>${text}</span>
      <button class="fav-remove"
              data-fav-type="${type}"
              data-fav-value="${value}"
              title="–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ">üóëÔ∏è</button>
    `;
    ul.appendChild(li);
  }
  function renderPanel() {
    ['events','spheres','types','organizers'].forEach(cat => {
      const ul = document.getElementById(`fav-${cat}-list`);
      if(ul) ul.innerHTML = '';
    });
    favoritesData.forEach(f => renderSingle(f.type, f.value));
  }

  // === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—ë–∑–¥–æ—á–∫–∞–º–∏ ===
  function initFavorites() {
    // 1) –í—ã—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∏–¥ –¥–ª—è –≤—Å–µ—Ö –∑–≤—ë–∑–¥–æ—á–µ–∫
    document.querySelectorAll('.fav-star').forEach(function(star) {
        var type = star.dataset.favType;
        var val  = star.dataset.favValue;
        var isFav = favoritesData.some(function(f) {
            return f.type === type && f.value.toString() === val.toString();
        });
        star.textContent = isFav ? '‚òÖ' : '‚òÜ';
        star.classList.toggle('favorited', isFav);
    });

    // 2) –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∑–≤—ë–∑–¥–æ—á–∫–µ (–≤ —Å–ø–∏—Å–∫–µ –∏ –≤ –±–∞–ª—É–Ω–µ)
    document.addEventListener('click', function(e) {
        // 1) –¢–æ–ª—å–∫–æ –ø–æ –Ω–∞—à–∏–º –∑–≤—ë–∑–¥–æ—á–∫–∞–º
        if (!e.target.classList.contains('fav-star')) return;

        // 2) –¢–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if (currentUserRole !== 'participant') {
            alert('–§—É–Ω–∫—Ü–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.');
            return;
        }


        var star = e.target;
        var type = star.dataset.favType;
        var val  = star.dataset.favValue;

        fetch('/favorites/toggle', {
            method: 'POST',
            credentials: 'same-origin',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ type: type, value: val })
        })
        .then(function(r) { return r.json(); })
        .then(function(data) {
            if (!data.success) return;

            // 2a) –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ favoritesData
            if (data.action === 'added') {
                favoritesData.push({ type: type, value: val });
            } else {
                favoritesData = favoritesData.filter(function(f) {
                    return !(f.type === type && f.value.toString() === val.toString());
                });
            }

            // 2b) –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—Å–µ –∑–≤—ë–∑–¥–æ—á–∫–∏ —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            document.querySelectorAll('.fav-star[data-fav-type="' + type + '"][data-fav-value="' + val + '"]')
                .forEach(function(s) {
                    if (data.action === 'added') {
                        s.textContent = '‚òÖ';
                        s.classList.add('favorited');
                    } else {
                        s.textContent = '‚òÜ';
                        s.classList.remove('favorited');
                    }
                });

           // 2c) –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª—É–Ω –Ω–∞ –∫–∞—Ä—Ç–µ
            if (type === 'event') {
              allPlacemarks.forEach(function(item) {
                if (!item.ids || !item.ids.includes(parseInt(val, 10))) return;
                const evObj = eventsData.find(o => o.id === parseInt(val, 10));

                if (item.ids.length === 1) {
                  // –æ–±—ã—á–Ω–∞—è –º–µ—Ç–∫–∞: –ø–µ—Ä–µ—Ä–∏—Å—É–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π –±–∞–ª—É–Ω
                  item.placemark.properties.set(
                    'balloonContent',
                    generateBalloonContent(evObj)
                  );
                } else {
                  // –∫–ª–∞—Å—Ç–µ—Ä: –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π HTML
                  const group = item.ids.map(id => eventsData.find(e => e.id === id));
                  item.clusterHtml = generateClusterBalloonContent(group);

                  // —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª–∞—Å—Ç–µ—Ä –∏–º–µ–Ω–Ω–æ —Å–µ–π—á–∞—Å –æ—Ç–∫—Ä—ã—Ç ‚Äî –ø–æ–∫–∞–∂–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π
                  if (item.placemark.balloon.isOpen()) {
                    item.placemark.properties.set('balloonContent', item.clusterHtml);
                  }
                }
              });
            }

            // 2d) –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚Äî –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª–∏, –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–æ ‚Äî —É–±—Ä–∞—Ç—å
            if (data.action === 'added') {
                renderSingle(type, val);
            } else {
                var li = document.querySelector(
                    '#fav-' + (type === 'event' ? 'events' : type + 's') +
                    '-list li[data-fav-value="' + val + '"]'
                );
                if (li) li.remove();
            }
        });
    });

    // 3) –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ ‚Äú–º—É—Å–æ—Ä–∫–µ‚Äù –≤ –ø–∞–Ω–µ–ª–∏
    document.addEventListener('click', function(e) {
        if (!e.target.classList.contains('fav-remove')) return;
        var btn  = e.target;
        var type = btn.dataset.favType;
        var val  = btn.dataset.favValue;

        fetch('/favorites/toggle', {
            method: 'POST',
            credentials: 'same-origin',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ type: type, value: val })
        })
        .then(function(r) { return r.json(); })
        .then(function(data) {
            if (!data.success) return;

            // 3a) –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤
            favoritesData = favoritesData.filter(function(f) {
                return !(f.type === type && f.value.toString() === val.toString());
            });

            // 3b) –£–±–∏—Ä–∞–µ–º –ø—É–Ω–∫—Ç –∏–∑ –ø–∞–Ω–µ–ª–∏
            var li = btn.closest('li');
            if (li) li.remove();

            // 3c) –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∑–≤—ë–∑–¥–æ—á–∫–∏ —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            document.querySelectorAll('.fav-star[data-fav-type="' + type + '"][data-fav-value="' + val + '"]')
                .forEach(function(s) {
                    s.textContent = '‚òÜ';
                    s.classList.remove('favorited');
                });

            // 3d) –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª—É–Ω, –µ—Å–ª–∏ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ
            if (type === 'event') {
                allPlacemarks.forEach(function(item) {
                      // –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –º–µ—Ç–æ–∫ ‚Äî item.ids = [ev.id], –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ ‚Äî –º–∞—Å—Å–∏–≤ >1
                      if (item.ids && item.ids.includes(parseInt(val, 10))) {
                        const evObj = eventsData.find(o => o.id === parseInt(val, 10));
                        // –µ—Å–ª–∏ —ç—Ç–æ –∫–ª–∞—Å—Ç–µ—Ä, —Ç–æ –ª—É—á—à–µ –æ–±–Ω–æ–≤–∏—Ç—å –∏ item.clusterHtml, –Ω–æ –¥–ª—è –Ω–∞—á–∞–ª–∞
                        // —Ö–æ—Ç—è –±—ã –ø–æ–¥–º–µ–Ω–∏–º —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã—Ç—ã–π –±–∞–ª—É–Ω
                        item.placemark.properties.set(
                          'balloonContent',
                          generateBalloonContent(evObj)
                        );
                      }
                    });
            }
        });
    });
}



if (
    document.getElementById('map') &&
    typeof ymaps !== 'undefined' &&
    typeof eventsData !== 'undefined'
  ) {
      ymaps.ready(initMap);
  }


function initMap() {
    console.log("DEBUG: initMap –≤—ã–∑–≤–∞–Ω–∞");
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—Ç—Ä –∏ –º–∞—Å—à—Ç–∞–± –ø–æ –¥–∞–Ω–Ω—ã–º eventsData
    var center, zoomLevel;
    if (typeof eventsData === 'undefined' || eventsData.length === 0) {
        center = [55.751244, 37.618423];
        zoomLevel = 5;
    } else if (eventsData.length === 1) {
        center = [eventsData[0].lat, eventsData[0].lon];
        zoomLevel = 12;
    } else {
        var totalLat = 0, totalLon = 0, count = 0;
        eventsData.forEach(function(ev) {
            if (ev.lat && ev.lon) {
                totalLat += ev.lat;
                totalLon += ev.lon;
                count++;
            }
        });
        if (count === 0) {
            center = [55.751244, 37.618423];
            zoomLevel = 5;
        } else {
            center = [totalLat / count, totalLon / count];
            zoomLevel = 10;
        }
    }

    console.log("DEBUG: –¶–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã:", center, "–ú–∞—Å—à—Ç–∞–±:", zoomLevel);

    // –°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É
    map = new ymaps.Map('map', {
        center: center,
        zoom: zoomLevel,
        controls: ['zoomControl', 'fullscreenControl']
    });

    // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–µ—Ç–∫–∏ –ø–æ –≤—Å–µ–º —Å–æ–±—ã—Ç–∏—è–º, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è eventsData –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
    if (typeof eventsData !== 'undefined') {
      updateMapMarkers(eventsData);
    }
}

// –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏—è submit –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ä–º —Å –∫–ª–∞—Å—Å–æ–º "ajax-subscription"
document.addEventListener('submit', function(e) {
    var form = e.target;
    if (!form.classList.contains('ajax-subscription')) return;

    console.log("DEBUG: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã ajax-subscription –¥–ª—è event_id:", form.getAttribute('data-event-id'));
    e.preventDefault();
    handleSubscriptionForm(form);
});

function handleSubscriptionForm(form) {
  var url = form.getAttribute('action');
  var method = form.getAttribute('method') || 'POST';
  var eventId = form.getAttribute('data-event-id');
  console.log("DEBUG: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞", method, "–Ω–∞ URL:", url, "–¥–ª—è event_id:", eventId);

  var formData = new FormData(form);
  fetch(url, {
    method: method,
    body: formData,
    headers: {
      'X-Requested-With': 'XMLHttpRequest'
    },
    credentials: 'same-origin'
  })
    .then(response => {
      console.log(
        "DEBUG: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è event_id:",
        eventId,
        "Status:",
        response.status
      );
      if (!response.ok) {
        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É (4xx –∏–ª–∏ 5xx)
        return response.json()
          .then(errData => {
            // –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–ª–æ –æ—à–∏–±–∫–∏ –¥–∞–ª—å—à–µ
            return Promise.reject(errData);
          })
          .catch(() => {
            // –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
            return Promise.reject({
              message: `–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.status}`
            });
          });
      }
      // –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON –∏–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
      return response.json();
    })
    .then(data => {
      console.log(
        "DEBUG: –î–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è event_id:",
        eventId,
        data
      );
      if (data.success) {
        updateSubscriptionUI(data.event_id, data.subscribed);
        console.log(
          "DEBUG: –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è event_id:",
          data.event_id,
          "–ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: subscribed =",
          data.subscribed
        );
      } else {
        console.error(
          "DEBUG: –û—à–∏–±–∫–∞ –≤ payload –¥–ª—è event_id:",
          eventId,
          data.message
        );
        alert(data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é.');
      }
    })
    .catch(err => {
      console.error(
        "DEBUG: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è event_id:",
        eventId,
        err
      );
      alert(err.message || '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.');
    });
}


function updateSubscriptionUI(event_id, subscribed) {
  console.log("DEBUG: updateSubscriptionUI –¥–ª—è event_id:", event_id, "–°–æ—Å—Ç–æ—è–Ω–∏–µ:", subscribed);

  // 1) –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ö –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏
  document.querySelectorAll('form.ajax-subscription[data-event-id="' + event_id + '"]').forEach(form => {
    if (subscribed) {
      form.action = '/unsubscribe/' + event_id;
      form.querySelector('button').textContent = '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è';
    } else {
      form.action = '/subscribe/' + event_id;
      form.querySelector('button').textContent = '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è';
    }
  });

  // 2) –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –≤ memory
  const evIndex = eventsData.findIndex(ev => ev.id === parseInt(event_id, 10));
  if (evIndex !== -1) {
    eventsData[evIndex].subscribed = subscribed;
  }

  // 3) –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª—É–Ω—ã –Ω–∞ –∫–∞—Ä—Ç–µ
  allPlacemarks.forEach(item => {
    // –µ—Å–ª–∏ –º–µ—Ç–∫–∞ –∏–ª–∏ –∫–ª–∞—Å—Ç–µ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—à–µ —Å–æ–±—ã—Ç–∏–µ
    if (!item.ids || !item.ids.includes(parseInt(event_id, 10))) return;

    if (item.ids.length === 1) {
      // –æ–¥–∏–Ω–æ—á–Ω–∞—è –º–µ—Ç–∫–∞ ‚Äî —Ä–µ–Ω–¥–µ—Ä–∏–º –µ—ë –±–∞–ª—É–Ω
      const evObj = eventsData.find(ev => ev.id === parseInt(event_id, 10));
      item.placemark.properties.set(
        'balloonContent',
        generateBalloonContent(evObj)
      );
    } else {
      // –∫–ª–∞—Å—Ç–µ—Ä ‚Äî –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π HTML
      const group = item.ids.map(id => eventsData.find(ev => ev.id === id));
      item.clusterHtml = generateClusterBalloonContent(group);

      // –µ—Å–ª–∏ –∫–ª–∞—Å—Ç–µ—Ä–Ω—ã–π –±–∞–ª—É–Ω —Å–µ–π—á–∞—Å –æ—Ç–∫—Ä—ã—Ç ‚Äî –ø–æ–¥–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
      if (item.placemark.balloon.isOpen()) {
        item.placemark.properties.set('balloonContent', item.clusterHtml);
      }
    }
  });
}


// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–ª—É–Ω–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è ev
// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–ª—É–Ω–∞, –ø–ª—é—Å —Å—Ç—Ä–æ–∫–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
function generateBalloonContent(ev) {
  // 1) –ó–∞–≥–æ–ª–æ–≤–æ–∫ + –∑–≤—ë–∑–¥–æ—á–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  let starHtml = '';
  if (currentUserRole === 'participant') {
    const isFav = favoritesData.some(f => f.type === 'event' && String(f.value) === String(ev.id));
    starHtml = `
      <span class="${isFav ? 'fav-star favorited' : 'fav-star'}"
            data-fav-type="event"
            data-fav-value="${ev.id}"
            title="–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
            style="cursor:pointer; font-size:1.2rem; vertical-align:middle; margin-left:5px;">
        ${isFav ? '‚òÖ' : '‚òÜ'}
      </span>
    `;
  }

  // 2) –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
  let priorityHtml = '';
  if (ev.priority > 0) {
    priorityHtml = `<div style="margin:6px 0; font-weight:600; color:#197d19;">
                      –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${ev.priority}
                    </div>`;
  }

  // 3) –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∏
  let personalitiesHtml = '';
  if (ev.personalities && ev.personalities.length) {
    personalitiesHtml = `
      <div style="background: #fff3cd; padding:4px; margin:6px 0; border-radius:4px;">
        <b>–ì–æ—Å—Ç–∏:</b> ${ev.personalities.join(', ')}
      </div>
    `;
  }

  // 4) –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
  let content = `
    <strong>${ev.title}${starHtml}</strong><br>
    ${priorityHtml}
    –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: ${ev.organizer || '‚Äî'}<br>
    –§–æ—Ä–º–∞—Ç: ${ev.event_format === 'online' ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}<br>
    –ú–µ—Å—Ç–æ: ${ev.city}${ev.event_format==='offline' && ev.address ? ', '+ev.address : ''}<br>
    –î–∞—Ç–∞: ${ev.date}<br>
    <strong>–°—Ç–∞—Ç—É—Å:</strong> ${ev.status}
    ${personalitiesHtml}
    <br>
    <a href="/events/${ev.id}"
       style="color:#004cfd; text-decoration:none; font-weight:500;">
      –ü–æ–¥—Ä–æ–±–Ω–µ–µ
    </a>
  `;

  // 5) –ö–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)
  if (currentUserRole === 'participant') {
    if (ev.status === '–ø—Ä–µ–¥—Å—Ç–æ–∏—Ç') {
      content += ev.subscribed
        ? `<br><form method="post" action="/unsubscribe/${ev.id}" class="ajax-subscription" data-event-id="${ev.id}">
             <button>–û—Ç–ø–∏—Å–∞—Ç—å—Å—è</button>
           </form>`
        : `<br><form method="post" action="/subscribe/${ev.id}" class="ajax-subscription" data-event-id="${ev.id}">
             <button>–ó–∞–ø–∏—Å–∞—Ç—å—Å—è</button>
           </form>`;
    } else if (ev.status === '–ø—Ä–æ—Ö–æ–¥–∏—Ç') {
      content += `<br><span style="color:green;">–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç</span>`;
    }
  }

  // 6) –û–±—ë—Ä—Ç–∫–∞
  return `
    <div style="font-family:Inter,sans-serif;font-size:1.1rem;line-height:1.4;color:#222;">
      ${content}
    </div>
  `;
}


function showClusterEvent(eventId) {
  console.log("DEBUG: showClusterEvent –¥–ª—è event_id:", eventId);
  var item = allPlacemarks.find(it => it.ids.includes(eventId));
  if (!item) { console.warn("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª–∞—Å—Ç–µ—Ä –¥–ª—è", eventId); return; }

  var ev = eventsData.find(e => e.id === eventId);
  if (!ev) return;

  if (!item._clusterHtml) item._clusterHtml = item.clusterHtml;

  // –í–ê–ñ–ù–û: —Å—Ç–∞–≤–∏–º + –º–µ–∂–¥—É –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–æ–π
  var singleHtml =
    generateBalloonContent(ev) +
    '<div style="text-align:right; margin-top:8px;">' +
      '<button onclick="restoreCluster(' + eventId + ')"' +
              ' style="background:transparent; border:none; font-size:1.2rem; cursor:pointer;">' +
        '√ó' +
      '</button>' +
    '</div>';

  item.placemark.properties.set('balloonContent', singleHtml);
  item.placemark.balloon.open();

  item.placemark.events.once('balloonclose', function(){
    restoreCluster(eventId);
  });
}


function generateClusterBalloonContent(group) {
  // –ü–µ—Ä–≤—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç
  var html =
    '<div style="font-family:Inter, sans-serif; font-size:1rem; color:#222; max-width:300px;">' +
      '<input type="text" id="cluster-search-input" ' +
         'placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é..." ' +
         'oninput="clusterFilter(this.value)" ' +
         'style="width:100%; padding:6px; margin-bottom:8px; box-sizing:border-box;"/>' +
      '<div id="cluster-empty" ' +
           'style="display:none; padding:10px; color:#555; font-style:italic;">' +
        '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º.' +
      '</div>' +
      '<div style="max-height:150px; min-height:130px; overflow-y:auto;">' +
        '<ul id="cluster-events-list" style="list-style:none; padding:0; margin:0;">';

  group.forEach(function(ev) {
    var isFav       = favoritesData.some(f => f.type==='event' && f.value.toString()===ev.id.toString());
    var starChar    = isFav ? '‚òÖ' : '‚òÜ';
    var starClass   = isFav ? 'fav-star favorited' : 'fav-star';
    var hasPers     = ev.personalities && ev.personalities.length > 0;
    // –µ—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏—è ‚Äî –ø–æ–¥—Å–≤–µ—Ç–∫–∞
    var itemBgStyle = hasPers
      ? 'background-color:#fff9c4; padding:4px; border-radius:4px; '
      : '';
    // –æ–±—â–∏–π —Å—Ç–∏–ª—å li
    var liStyle = itemBgStyle + 'margin-bottom:6px; display:flex; align-items:center;';

    html +=
      '<li data-ev-id="' + ev.id + '" data-ev-title="' + ev.title + '"' +
          ' style="' + liStyle + '">' +
        '<a href="javascript:showClusterEvent(' + ev.id + ')"' +
           ' style="font-weight:600; color:#004cfd; text-decoration:none; flex:1;">' +
           ev.title +
        '</a>' +
        '<span class="' + starClass + '"' +
              ' data-fav-type="event" data-fav-value="' + ev.id + '"' +
              ' title="–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"' +
              ' style="cursor:pointer; margin-left:8px; font-size:1.2em;">' +
          starChar +
        '</span>' +
        '<a href="/events/' + ev.id + '"' +
           ' style="margin-left:8px; font-size:0.9rem; color:#004cfd; text-decoration:none;">' +
           '–ü–æ–¥—Ä–æ–±–Ω–µ–µ' +
        '</a>' +
      '</li>';
  });

  html +=
        '</ul>' +
      '</div>' +
    '</div>';

  return html;
}




function restoreCluster(eventId) {
    var item = allPlacemarks.find(it=>it.ids.includes(eventId));
    if (!item || !item._clusterHtml) return;
    item.placemark.properties.set('balloonContent', item._clusterHtml);
    item.placemark.balloon.open();
}


function clusterFilter(term) {
    term = term.toLowerCase();
    var listNode = document.getElementById('cluster-events-list');
    var emptyNode = document.getElementById('cluster-empty');
    if (!listNode || !emptyNode) return;
    var anyVisible = false;
    listNode.querySelectorAll('li').forEach(function(li) {
        var title = li.dataset.evTitle.toLowerCase();
        if (title.includes(term)) {
            li.style.display = '';
            anyVisible = true;
        } else {
            li.style.display = 'none';
        }
    });
    emptyNode.style.display = anyVisible ? 'none' : 'block';
}


// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–µ—Ç–æ–∫ –Ω–∞ –∫–∞—Ä—Ç–µ (—Ç–æ–ª—å–∫–æ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –≥–¥–µ eventsData –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞)
// –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë—Ç –≤—Å–µ –º–µ—Ç–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ —Å —É—á—ë—Ç–æ–º –ø–æ–ª—è ev.priority
// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–µ—Ç–æ–∫ –Ω–∞ –∫–∞—Ä—Ç–µ (—Ç–æ–ª—å–∫–æ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –≥–¥–µ eventsData –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞)
// –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë—Ç –≤—Å–µ –º–µ—Ç–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ —Å —É—á—ë—Ç–æ–º –ø–æ–ª—è ev.priority
function updateMapMarkers(filteredEvents) {
  map.geoObjects.removeAll();
  allPlacemarks = [];

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–Ω–ª–∞–π–Ω-—Å–æ–±—ã—Ç–∏—è –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
  const onlineGroups = {};
  filteredEvents.forEach(ev => {
    if (ev.event_format === 'online' && ev.lat && ev.lon) {
      const key = ev.lat.toFixed(6) + ',' + ev.lon.toFixed(6);
      (onlineGroups[key] = onlineGroups[key] || []).push(ev);
    }
  });

  // –û–¥–∏–Ω–æ—á–Ω—ã–µ –º–µ—Ç–∫–∏
  filteredEvents.forEach(ev => {
    if (!ev.lat || !ev.lon) return;
    const key = ev.lat.toFixed(6) + ',' + ev.lon.toFixed(6);
    const group = onlineGroups[key] || [];
    // –ï—Å–ª–∏ –æ–Ω–ª–∞–π–Ω-–≥—Ä—É–ø–ø–∞ –±–æ–ª—å—à–µ 1, –µ—ë –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –Ω–∏–∂–µ –∫–∞–∫ –∫–ª–∞—Å—Ç–µ—Ä
    if (ev.event_format === 'online' && group.length > 1) return;

    // –í—ã–±–∏—Ä–∞–µ–º –∏–∫–æ–Ω–∫—É –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É, –≥–æ—Å—Ç—è–º, —Ñ–æ—Ä–º–∞—Ç—É
    let preset;
    if (ev.priority > 0) {
      preset = 'islands#greenDotIcon';
    } else if (ev.personalities && ev.personalities.length) {
      preset = 'islands#yellowDotIcon';
    } else if (ev.event_format === 'online') {
      preset = 'islands#redCircleDotIconWithCaption';
    } else {
      preset = 'islands#blueDotIconWithCaption';
    }

    const placemark = new ymaps.Placemark(
      [ev.lat, ev.lon],
      {
        balloonContent: generateBalloonContent(ev),
        iconCaption: ev.title
      },
      { preset }
    );
    map.geoObjects.add(placemark);
    allPlacemarks.push({ ids: [ev.id], placemark });
  });

  // –ö–ª–∞—Å—Ç–µ—Ä—ã –æ–Ω–ª–∞–π–Ω-—Å–æ–±—ã—Ç–∏–π
  Object.values(onlineGroups).forEach(group => {
    if (group.length < 2) return;
    const lat = group[0].lat, lon = group[0].lon;

    // –ò–∫–æ–Ω–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞: –∑–µ–ª—ë–Ω–∞—è, –µ—Å–ª–∏ –≤ –≥—Ä—É–ø–ø–µ –µ—Å—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –∏–Ω–∞—á–µ –∂—ë–ª—Ç–∞—è/–∫—Ä–∞—Å–Ω–∞—è
    const hasPriority = group.some(ev => ev.priority > 0);
    const hasPers = group.some(ev => ev.personalities && ev.personalities.length);
    let clusterPreset;
    if (hasPriority) {
      clusterPreset = 'islands#greenDotIcon';
    } else if (hasPers) {
      clusterPreset = 'islands#yellowDotIcon';
    } else {
      clusterPreset = 'islands#redCircleDotIconWithCaption';
    }

    const html = generateClusterBalloonContent(group);
    const placemark = new ymaps.Placemark(
      [lat, lon],
      { balloonContent: html, balloonContentHeader: `–û–Ω–ª–∞–π–Ω: ${group.length}` },
      { preset: clusterPreset }
    );
    map.geoObjects.add(placemark);
    allPlacemarks.push({ ids: group.map(e=>e.id), placemark, clusterHtml: html });
  });

  // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã –≤—Å–µ —Ç–æ—á–∫–∏ –±—ã–ª–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≤–∏–¥–∏–º–æ—Å—Ç–∏
  const bounds = map.geoObjects.getBounds();
  if (bounds) {
    map.setBounds(bounds, {
      checkZoomRange: true,
      zoomMargin: 50
    });
  }
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏—Ç –ø–ª–∏—Ç–∫–∏ .event-card –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ –º–∞—Å—Å–∏–≤—É filteredEvents.
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±–ª–æ–∂–∫—É –∏–∑ static/uploads/meropimage/ev.image_filename –∏–ª–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä.
 */
function updateEventList(filteredEvents) {
  console.log("DEBUG: updateEventList", filteredEvents.length);
  const container = document.getElementById('event-list');
  container.innerHTML = '';

  if (filteredEvents.length === 0) {
    container.innerHTML = '<p>–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.</p>';
    return;
  }

  filteredEvents.forEach(ev => {
    // –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏
    const card = document.createElement('div');
    card.className = 'event-card';

    // –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–≥–ª—É—à–∫–∞
    if (ev.image_filename) {
      const img = document.createElement('img');
      // —Ç–µ–ø–µ—Ä—å –æ—Ç–¥–∞–µ–º –ø–æ –Ω–∞—à–µ–º—É –º–∞—Ä—à—Ä—É—Ç—É
      img.src = `/uploads/meropimage/${ev.image_filename}`;
      img.alt = ev.title;
      card.appendChild(img);
    } else {
      const noImg = document.createElement('div');
      noImg.className = 'no-image';
      noImg.textContent = '–ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è';
      card.appendChild(noImg);
    }

    // —Ç–µ–ª–æ –∫–∞—Ä—Ç–æ—á–∫–∏
    const body = document.createElement('div');
    body.className = 'event-card-body';

    // –∑–∞–≥–æ–ª–æ–≤–æ–∫ + —Å—Å—ã–ª–∫–∞
    const h5 = document.createElement('h5');
    const link = document.createElement('a');
    link.href = `/events/${ev.id}`;
    link.textContent = ev.title;
    h5.appendChild(link);
    if (ev.priority > 0) {
      const pb = document.createElement('span');
      pb.className = 'priority-badge';
      pb.textContent = 'P' + ev.priority;
      h5.appendChild(pb);
    }
    body.appendChild(h5);

    // –¥–∞—Ç–∞
    const dateP = document.createElement('div');
    dateP.textContent = ev.date;
    dateP.style.fontSize = '0.85rem';
    dateP.style.color = '#666';
    dateP.style.marginBottom = '8px';
    body.appendChild(dateP);

    // –±–µ–π–¥–∂–∏
    const badges = document.createElement('div');
    badges.className = 'badges';
    const tBadge = document.createElement('span');
    tBadge.className = 'badge bg-info text-dark';
    tBadge.textContent = ev.event_type;
    const sBadge = document.createElement('span');
    sBadge.className = 'badge bg-secondary';
    sBadge.textContent = ev.event_sphere;
    badges.append(tBadge, sBadge);
    body.appendChild(badges);

    // –¥–æ–ø. –∏–Ω—Ñ–æ (–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä, –≥–æ—Ä–æ–¥)
    const info = document.createElement('p');
    info.style.marginTop = 'auto';
    info.textContent = (ev.organizer || '‚Äî') + ', ' + ev.city +
      (ev.event_format === 'offline' && ev.address ? ', ' + ev.address : '');
    body.appendChild(info);

    card.appendChild(body);

    // —Ñ—É—Ç–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏
    const footer = document.createElement('div');
    footer.className = 'event-card-footer';

    // –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    if (currentUserRole === 'participant') {
      const star = document.createElement('span');
      star.className = 'fav-star';
      star.dataset.favType = 'event';
      star.dataset.favValue = ev.id;
      const isFav = favoritesData.some(f => f.type==='event' && f.value == ev.id);
      star.textContent = isFav ? '‚òÖ' : '‚òÜ';
      footer.appendChild(star);
    }

    // –º–∞—Ä–∫–µ—Ä
    const marker = document.createElement('span');
    marker.className = 'map-marker';
    marker.textContent = 'üìç';
    marker.onclick = () => centerMapOnEvent(ev.id);
    footer.appendChild(marker);

    // –∫–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏
    if (currentUserRole === 'participant') {
      if (ev.status === '–ø—Ä–µ–¥—Å—Ç–æ–∏—Ç') {
        const form = document.createElement('form');
        form.className = 'ajax-subscription';
        form.method = 'post';
        form.action = (ev.subscribed ? '/unsubscribe/' : '/subscribe/') + ev.id;
        form.dataset.eventId = ev.id;
        form.style.display = 'inline';

        const btn = document.createElement('button');
        btn.type = 'submit';
        btn.textContent = ev.subscribed ? '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è' : '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è';
        form.appendChild(btn);
        footer.appendChild(form);

      } else if (ev.status === '–ø—Ä–æ—Ö–æ–¥–∏—Ç') {
        const now = document.createElement('span');
        now.style.color = 'green';
        now.textContent = '–ò–¥—ë—Ç —Å–µ–π—á–∞—Å';
        footer.appendChild(now);
      }
    }

    card.appendChild(footer);
    container.appendChild(card);
  });
}




// –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
function filterEvents() {
    console.log("DEBUG: filterEvents –∑–∞–ø—É—â–µ–Ω–∞");
    var filterTitle = document.getElementById('filter-title').value.toLowerCase();
    var filterOrganizer = document.getElementById('filter-organizer').value.toLowerCase();
    var filterCity = document.getElementById('filter-city').value.toLowerCase();
    var filterSphere = document.getElementById('filter-sphere').value;
    var filterType = document.getElementById('filter-type').value;
    var filterFormat = document.getElementById('filter-format').value;

    var filtered = eventsData.filter(function(ev) {
        var match = true;
        if (filterTitle && !ev.title.toLowerCase().includes(filterTitle)) match = false;
        if (filterOrganizer && !(ev.organizer && ev.organizer.toLowerCase().includes(filterOrganizer))) match = false;
        if (filterCity && !(ev.city && ev.city.toLowerCase().includes(filterCity))) match = false;
        if (filterSphere && ev.event_sphere !== filterSphere) match = false;
        if (filterType && ev.event_type !== filterType) match = false;
        if (filterFormat && ev.event_format !== filterFormat) match = false;
        return match;
    });

    console.log("DEBUG: filterEvents –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª", filtered.length, "—Å–æ–±—ã—Ç–∏–π");
    updateEventList(filtered);
    updateMapMarkers(filtered);
}


function filterByFavorites() {
    // –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä
    if (!favoritesData.length) {
      filterEvents();
      return;
    }

    // —Å–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π
    var favEvents     = favoritesData.filter(f => f.type==='event').map(f=>f.value.toString());
    var favSpheres    = favoritesData.filter(f => f.type==='sphere').map(f=>f.value.toLowerCase());
    var favTypes      = favoritesData.filter(f => f.type==='type').map(f=>f.value.toLowerCase());
    var favOrganizers = favoritesData.filter(f => f.type==='organizer').map(f=>f.value.toLowerCase());

    // —Ñ–∏–ª—å—Ç—Ä—É–µ–º eventsData
    var filtered = eventsData.filter(function(ev){
      // 1) –ø–æ ID —Å–æ–±—ã—Ç–∏—è
      if (favEvents.includes(ev.id.toString())) return true;
      // 2) –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É
      if (ev.organizer && favOrganizers.includes(ev.organizer.toLowerCase())) return true;
      // 3) –ø–æ —Å—Ñ–µ—Ä–µ –∏ —Ç–∏–ø—É ‚Äî —á–∏—Ç–∞–µ–º –∏–∑ <li>
      var li = document.querySelector('li[data-event-id="'+ev.id+'"]');
      if (li) {
        var sp = (li.dataset.sphere||'').toLowerCase();
        var tp = (li.dataset.type  ||'').toLowerCase();
        if (favSpheres.includes(sp)) return true;
        if (favTypes.includes(tp))   return true;
      }
      return false;
    });

    updateEventList(filtered);
    updateMapMarkers(filtered);
  }

  // –≤–µ—à–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É
  document.addEventListener('DOMContentLoaded', function(){
    var btn = document.getElementById('filter-favorites');
    if (btn) {
      btn.addEventListener('click', function(e){
        e.preventDefault();
        filterByFavorites();
      });
    }
  });

// –ü—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∏–∫–æ–Ω–∫—É –≤ —Å–ø–∏—Å–∫–µ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–ª—É–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –º–µ—Ç–∫–∏
function centerMapOnEvent(eventId) {
    console.log("DEBUG: centerMapOnEvent –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è event_id:", eventId);
    var item = allPlacemarks.find(function(it) {
        if (Array.isArray(it.ids)) return it.ids.includes(eventId);
        return it.ids[0] === eventId;
    });
    if (!item) {
        console.warn("DEBUG: –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è event_id:", eventId);
        return;
    }
    var ev = eventsData.find(e=>e.id===eventId);
    if (ev && ev.lat && ev.lon) {
        map.setCenter([ev.lat, ev.lon], 14, { checkZoomRange: true });
    }
    if (item.ids.length > 1) {
        // —Å–Ω–∞—á–∞–ª–∞ –∫—Ä–∞—Ç–∫–∏–π –±–∞–ª—É–Ω –ø–æ —ç—Ç–æ–º—É —Å–æ–±—ã—Ç–∏—é
        showClusterEvent(eventId);
    } else {
        item.placemark.balloon.open();
    }
}



// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', function() {
    console.log("DEBUG: DOMContentLoaded");
    // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç (—ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π)
    if (document.getElementById('filter-title')) {
      document.getElementById('filter-title').addEventListener('input', filterEvents);
      document.getElementById('filter-organizer').addEventListener('input', filterEvents);
      document.getElementById('filter-city').addEventListener('input', filterEvents);
      document.getElementById('filter-sphere').addEventListener('change', filterEvents);
      document.getElementById('filter-type').addEventListener('change', filterEvents);
      document.getElementById('filter-format').addEventListener('change', filterEvents);

      console.log("DEBUG: –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã");
      updateEventList(eventsData);
    }

    initFavoritesPanel();
    renderPanel();
    initFavorites();


});
